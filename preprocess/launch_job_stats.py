import os
import sys
import subprocess

import hydra
from omegaconf import DictConfig

from jinja2 import Environment, FileSystemLoader

from dataclasses import dataclass

@hydra.main(config_path="bsub_config", config_name="base_stats", version_base=None)
def main(cfg: DictConfig):
    env             = Environment(loader=FileSystemLoader(cfg.dir_bsub_template))
    template        = env.get_template(cfg.file_bsub_template)
    rendered_script = template.render(
        qos           = cfg.qos,
        walltime      = cfg.walltime,
        job           = cfg.job,
        bsub_num_cpus = cfg.bsub_num_cpus,
        num_cpus      = cfg.num_cpus,
        exp           = cfg.exp,
        num_runs      = cfg.num_runs + 1,  # range is not right inclusive
        detector_name = cfg.detector_name,
    )

    print("Generated BSUB Script:")
    print(rendered_script)
    print()

    os.makedirs(cfg.dir_bsub_jobs, exist_ok = True)
    path_bsub_job = os.path.join(cfg.dir_bsub_jobs, cfg.file_bsub_job)
    with open(path_bsub_job, 'w') as fh:
        fh.write(rendered_script)

        fh.write("\n")
        end_note = '# THIS SCRIPT IS GENERATED BY EXECUTING: \n# python ' + ' '.join(sys.argv)
        fh.write(end_note)

    # Executing the bsub script
    bsub_command = f"bsub {path_bsub_job}"
    print(bsub_command)
    os.system(bsub_command)

if __name__ == "__main__":
    main()

